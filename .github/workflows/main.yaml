name: SQR-Pasynkov-actions

on:
  push:
  pull_request:

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  coverage-back:
    name: Coverage back
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install
      - name: Run coverage
        working-directory: ./backend
        run: poetry run pytest --cov=app/ --cov-branch --cov-report=term --cov-fail-under=70
  
  flake-back:
    name: Flake 8 back
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install
      - name: Run flake8
        working-directory: ./backend
        run: poetry run flake8 --max-complexity=10
  
  bandit-back:
    name: Bandit back
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install
      - name: Run bandit
        working-directory: ./backend
        run: poetry run bandit -r app/

  unit-tests-back:
    name: Unit Tests back
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: poetry install
        working-directory: ./backend
      - name: Run unit tests
        working-directory: ./backend
        run: poetry run pytest tests/unit


  coverage-front:
    name: Coverage front
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('frontend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./frontend
        run: poetry install
      - name: Run coverage
        working-directory: ./frontend
        run: poetry run pytest --cov=src/ --cov-branch --cov-report=term --cov-fail-under=25
  
  flake-front:
    name: Flake 8 front
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('frontend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./frontend
        run: poetry install
      - name: Run flake8
        working-directory: ./frontend
        run: poetry run flake8 --max-complexity=10
  
  bandit-front:
    name: Bandit front
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('frontend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        working-directory: ./frontend
        run: poetry install
      - name: Run bandit
        working-directory: ./frontend
        run: poetry run bandit -r app/

  unit-tests-front:
    name: Unit Tests front
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.backend == 'true' || github.event_name == 'pull_request'}}    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.7.1'
      - name: Cache Poetry virtual environment
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('frontend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: poetry install
        working-directory: ./frontend
      - name: Run unit tests
        working-directory: ./frontend
        run: poetry run pytest tests/unit