# generated by fastapi-codegen:
#   filename:  api.swagger.yaml
#   timestamp: 2024-04-18T23:37:43+00:00

from __future__ import annotations

from typing import Union, Annotated
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBasicCredentials, HTTPBasic, HTTPBearer

from .internals.auth.user import check_user
from .internals.auth.token import decode_token, create_token
from .models import Error, User, UserCredentials


basic_security = HTTPBasic()
security = HTTPBearer()


async def get_current_user_basic(credentials: Annotated[HTTPBasicCredentials, Depends(basic_security)]) -> User:
    if not check_user(credentials.username, credentials.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"Authorization": "Basic"},
        )
    return User(
        username=credentials.username,
        password=credentials.password,
    )


async def get_current_user(token: Annotated[str, Depends(security)]):
    user = decode_token(token)
    if not check_user(user.username, user.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail='Incorrect authorization Bearer token',
            headers={"Authorization": "Bearer"},
        )
    return create_token(user)
